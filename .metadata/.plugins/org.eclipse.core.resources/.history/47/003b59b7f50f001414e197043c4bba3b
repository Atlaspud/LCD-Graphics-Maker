package model;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.PrintWriter;
import java.util.ArrayList;

public class GridField {
	private ArrayList<Block> blocksBackground;
	private ArrayList<Block> blocks;
	private Dimension fieldSize;
	private int blockSize;
	private Dimension gridSize;
	
	public GridField(Dimension size) {
		fieldSize = size;
		blocksBackground = new ArrayList<Block>();
		blocks = new ArrayList<Block>();
		gridSize = new Dimension(84,48);
		blockSize = 8;
	}
	
	public void reset() {
		blocksBackground.clear();
		blocks.clear();
		
		double divideField = (fieldSize.width-blockSize*gridSize.width)/2;
		for (int i = 0; i < gridSize.height; i++) {
			for (int j = 0; j < gridSize.width; j++) {
				Block block = new Block(true);
				block.size.setSize(blockSize, blockSize);
				block.position.setLocation(divideField + blockSize * j, blockSize * i);
				block.colour = Color.BLACK;
				blocksBackground.add(block);
			}
		}
		
		for (int group = 0; group < 6; group++) {
			for (int i = 0; i < gridSize.width; i++) {
				for (int j = 0; j < 8; j++) {
					Block block = new Block(false);
					block.size.setSize(blockSize, blockSize);
					block.position.setLocation(divideField + blockSize * i, (blockSize*8) * group + blockSize * j);
					block.colour = Color.WHITE;
					blocks.add(block);
				}
			}
		}
	}
	
	public void startNew() {
		blocksBackground.clear();
		blocks.clear();
		
		double divideField = (fieldSize.width-blockSize*gridSize.width)/2;
		for (int i = 0; i < gridSize.height; i++) {
			for (int j = 0; j < gridSize.width; j++) {
				Block block = new Block(true);
				block.size.setSize(blockSize, blockSize);
				block.position.setLocation(divideField + blockSize * j, blockSize * i);
				block.colour = Color.BLACK;
				blocksBackground.add(block);
			}
		}
		
		for (int group = 0; group < 6; group++) {
			for (int i = 0; i < gridSize.width; i++) {
				for (int j = 0; j < 8; j++) {
					Block block = new Block(false);
					block.size.setSize(blockSize, blockSize);
					block.position.setLocation(divideField + blockSize * i, (blockSize*8) * group + blockSize * j);
					block.colour = Color.WHITE;
					blocks.add(block);
				}
			}
		}
	}
	
	public void draw(Graphics g) {
		
		for (Block block : blocks) {
			block.draw(g);
		}
		
		for (Block block : blocksBackground) {
			block.draw(g);
		}
	}
	
	public void update(int x, int y) {
		// Update Grid State
		for (Block block: blocks) {
			if (block.hit(x, y)) {
				break;
			}
		}
	}
	
	public void updateDrag(int x, int y) {
		// Update Grid State
		for (Block block: blocks) {
			if (block.hitDrag(x, y)) {
				break;
			}
		}
	}
	
	public void generateFile() {
		StringBuilder builder = new StringBuilder();
		int row = 0;
		for (int group = 0; group < 6; group++) {
			for (int i = 0; i < gridSize.width; i++) {
				int number = 0;
				for (int j = 0; j < 8; j++) {
					int currentIndex = group * (gridSize.width * 8) + j + i * 8;
					Block block = blocks.get(currentIndex);
					if (block.isSelected()) {
						number += (int) (Math.pow(2, j));
					}
				}
				
				row++;
				if (row == 16) {
					if (number >= 16) {
						builder.append("0x" + Integer.toHexString(number).toUpperCase() + ",\n");
					} else {
						builder.append("0x0" + Integer.toHexString(number).toUpperCase() + ",\n");
					}
					row = 0;
				} else {
					if (number >= 16) {
						builder.append("0x" + Integer.toHexString(number).toUpperCase() + ",");
					} else {
						builder.append("0x0" + Integer.toHexString(number).toUpperCase() + ",");
					}
				}
			}
		}
		save("LEDHex.txt",builder.toString());
	}
	
	public void loadFile() {
		
	}
	
	private void save(String filename, String text) {
		try {
			PrintWriter writer = new PrintWriter(filename);
			writer.print(text);
			writer.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
