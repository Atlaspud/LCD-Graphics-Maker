package model;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;

public class GridField {
	private static final char[] hexDigits = { 
	    '0', '1', '2', '3', '4', '5', '6', '7', 
	    '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
	  };
	private ArrayList<Block> blocksBackground;
	private ArrayList<Block> blocks;
	private Dimension fieldSize;
	private int blockSize;
	private Dimension gridSize;
	
	public GridField(Dimension size) {
		fieldSize = size;
		blocksBackground = new ArrayList<Block>();
		blocks = new ArrayList<Block>();
		gridSize = new Dimension(84,48);
		blockSize = 8;
	}
	
	public void reset() {
		blocksBackground.clear();
		blocks.clear();
		
		double divideField = (fieldSize.width-blockSize*gridSize.width)/2;
		for (int i = 0; i < gridSize.height; i++) {
			for (int j = 0; j < gridSize.width; j++) {
				Block block = new Block(true);
				block.size.setSize(blockSize, blockSize);
				block.position.setLocation(divideField + blockSize * j, 100 + blockSize * i);
				block.colour = Color.BLACK;
				blocksBackground.add(block);
			}
		}
		
		for (int group = 0; group < 6; group++) {
			for (int i = 0; i < gridSize.width; i++) {
				for (int j = 0; j < 8; j++) {
					Block block = new Block(false);
					block.size.setSize(blockSize, blockSize);
					block.position.setLocation(divideField + blockSize * i, 100 + (blockSize*8) * group + blockSize * j);
					block.colour = Color.WHITE;
					blocks.add(block);
				}
			}
		}
	}
	
	public void draw(Graphics g) {
		
		for (Block block : blocks) {
			block.draw(g);
		}
		
		for (Block block : blocksBackground) {
			block.draw(g);
		}
	}
	
	/* update()
	 * 
	 * -Each bullet uses move()
	 * -Checks if bullet has impacted a barrier, enemy, ship, or another bullet
	 * -If the ship has been impacted, gameover is set to true
	 * -For the rest both impact objects are removed from the arrays
	 * -If the enemy impacts the ship, gameover is true
	 * -If the enemy impacts a barrier, that barrier is removed from the array
	 * -Each enemy uses ()
	 * -Each enemy uses enemyRandomFire()
	 * -The ship uses move()
	 */
	
	public void update(int x, int y) {
		// Update Grid State
		for (Block block: blocks) {
			if (block.hit(x, y)) {
				break;
			}
		}
	}
	
	public void generateFile() {
		for (int group = 0; group < 6; group++) {
			for (int i = 0; i < gridSize.width; i++) {
				int number = 0;
				for (int j = 0; j < 8; j++) {
					int currentIndex = group * (gridSize.width * 8) + j + i * 8;
					Block block = blocks.get(currentIndex);
					if (block.isSelected()) {
						number = number  + (int) (Math.pow(2, j));
					}
				}
				
				System.out.println(number);
			}
		}
	}

}
